#ifndef _QUIESCE_XH
#define _QUIESCE_XH

int quiesce_lub(int a, int b) {
  if (a < 0 || b < 0) {
    return -1;
  }
  return a + b;
}

int quiesce_leq(int a, int b) {
  // if b is top
  if (b < 0) {return 1;}
  // if a only is top
  if (a < 0) {return 0;}
  // otherwise...
  return a <= b;
}

void quiesce_display(int i) {
  printf("%d", i);
}

Lvar<int>* makeQuiesceLvar() {
  Lattice<int>* lat = lattice(-1, quiesce_leq, quiesce_lub, quiesce_display);
  Lvar<int>* lvar = newLvar lat;
  return lvar;
}

void doneTask(Lvar<int>* done) {
  put (1) in done;
}

void quiesce(Lvar<int>* done, int num_threads) {
  Lattice<int>* lat = getLattice(done);
  ActivationSet<int>* a = activationSet(lat, 1){num_threads};
  ThresholdSet<int>* t = thresholdSet(lat, 1){a};
  get done with t;
  freeSet a;
  freeSet t;
  freeLvar done;
  freeLattice lat;
}

#endif
