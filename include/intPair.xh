#include "lvars.xh"
#include "int.xh"

#ifndef _INTSETLVAR_H
#define _INTSETLVAR_H

typedef datatype Pair Pair;
datatype Pair {
  IP_Top();
  IP(Int*, Int*);
  IP_Bot();
};

int isTopInt(Int* i) {
  match (i) {
    I_Top() -> {return 1;}
    _ -> {return 0;}
  }
}

// display method

void display_intPair(Pair* p) {
  match (p) {
    IP_Top() -> {printf("Error!");}
    IP(i1, i2) -> {
      printf("(");
      displayInteger(i1);
      printf(", ");
      displayInteger(i2);
      printf(")");
    }
    IP_Bot() -> {printf("?");}
  }
}

// leq methods

int leqInt(Int* i1, Int* i2) {
  match (i1) {
    I_Bot() -> {return 1;}
    I(n1) -> {
      match (i2) {
        I_Bot() -> {return 0;}
        I(n2) -> {return n1 == n2;}
        I_Top() -> {return 1;} 
      }
    }
    I_Top() -> {
      match(i2) {
        I_Top() -> {return 1;}
        _ -> {return 0;}
      }
    }
  }
}

int leq_intPair(Pair* p1, Pair* p2) {
  match (p1) {
    IP_Top() -> {
      match (p2) {
        IP_Top() -> {return 1;}
        _ -> {return 0;}
      }
    }
    IP(i1, i2) -> {
      match (p2) {
        IP_Top() -> {return 1;}
        IP(i3, i4) -> {
          return leqInt(i1, i3) && leqInt(i2, i4);
        }
        IP_Bot() -> {return 0;}
      }
    }
    IP_Bot() -> {return 1;}
  }
}

// set up lub methods

Int* lubInt(Int* i1, Int* i2) {
  match (i1) {
    I_Top() -> {return i1;}
    I_Bot() -> {return i2;}
    I(n1) -> {
      match (i2) {
        I_Top() -> {return i2;}
        I_Bot() -> {return i1;}
        I(n2) -> {
          if (n1 == n2) {
            return i1;
          }
          return I_Top(); 
        }
      }
    }
  }
}

Pair* lub_intPair(Pair* p1, Pair* p2) {
  match (p1) {
    IP_Top() -> {return p1;}
    IP_Bot() -> {return p2;}
    IP(i1, i2) -> {
      match (p2) {
        IP_Top() -> {return p2;}
        IP_Bot() -> {return p1;}
        IP(i3, i4) -> {
          Int* val1 = lubInt(i1, i3);
          if (isTopInt(val1)) {
            return IP_Top();
          }
          Int* val2 = lubInt(i2, i4);
          if (isTopInt(val2)) {
            return IP_Top();
          }
          return IP(val1, val2);
        }
      }
    }
  }
}

int eqIntPair(Pair* p1, Pair* p2) {
  match (p1) {
    IP_Top() -> {
      match (p2) {
        IP_Top() -> {return 1;}
        _ -> {return 0;}
      }
    }
    IP_Bot() -> {
      match (p2) {
        IP_Bot() -> {return 1;}
        _ -> {return 0;}
      }
    }
    IP(i1, i2) -> {
      match (p2) {
        IP(i3, i4) -> {return eqInt(i1, i3) && eqInt(i2, i4);}
        _ -> {return 0;}
      }
    }
  }
}

void free_intPair(Pair* p) {
  match (p) {
    IP(i1, i2) -> {
      freeInteger(i1);
      freeInteger(i2);
      free(p);
    }
    _ -> {free(p);}
  }
}

Lattice<Pair*>* intPairLattice() {
  return lattice(IP_Top(), leq_intPair, lub_intPair, display_intPair, free_intPair);
}

#endif
