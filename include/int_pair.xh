#ifndef _INT_PAIR_XH
#define _INT_PAIR_XH

#include "lvars.xh"
#include "maybe_int.xh"

typedef datatype IntPair IntPair;
datatype IntPair {
  Int_Pair(MaybeInt*, MaybeInt*);
}

int leq_int_pair(IntPair* p1, IntPair* p2) {
  match (p1) {
    Int_Pair(i1, i2) -> {
      match (p2) {
        Int_Pair(i3, i4) -> {
          return leq_maybe_int(i1, i3) &&
                 leq_maybe_int(i2, i4);
        }
      }
    }
  }
}

Value<IntPair*>* lub_int_pair(IntPair* p1, IntPair* p2) {
  match (p1) {
    Int_Pair(i1, i2) -> {
      match (p2) {
        Int_Pair(i3, i4) -> {

          MaybeInt* val1;
          if (leq_maybe_int(i1, i3)) {
            val1 = copy_maybe_int(i3);
          }
          else if (leq_maybe_int(i3, i1)) {
            val1 = copy_maybe_int(i1);
          }
          else {
            return Top<IntPair*>
          }

          MaybeInt* val2;
          if (leq_maybe_int(i2, i4)) {
            val2 = copy_maybe_int(i4);
          }
          else if (leq_maybe_int(i4, i2)) {
            val2 = copy_maybe_int(i2);
          }
          else {
            return Top<IntPair*>
          } 

          return value (Int_Pair(val1, val2));

        } 
      }
    }
  }
}

void display_int_pair(IntPair* p) {
  match (p) {
    Int_Pair(i1, i2) -> {
      printf("(");
      display_maybe_int(i1);
      printf(", ");
      display_maybe_int(i2);
      printf(")");
    }
  }
}

void free_int_pair(IntPair* p) {
  match (p) {
    Int_Pair(i1, i2) -> {
      free_maybe_int(i1);
      free_maybe_int(i2);
      free(p);
    }
  }
}

Lattice<IntPair*>* lattice_int_pair() {
  return lattice(leq_int_pair, lub_int_pair, display_int_pair, free_int_pair);
}

Lvar<IntPair*>* makeLvar_int_pair() {
  Lattice<IntPair*>* lat = lattice_int_pair();
  return newLvar lat;
}


#endif
