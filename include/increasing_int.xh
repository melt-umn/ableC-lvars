#ifndef _INCREASING_INT_XH
#define _INCREASING_INT_XH

#include "lvars.xh"
#include "wrapped_int.xh"

int leq_increasing_int(Int* i1, Int* i2) {
  match (i2) {
    I(n1) -> {
      match (i1) {
        I(n2) -> {return n1 <= n2;}
      }
    }
  }
}

Int* lub_increasing_int(Int* i1, Int* i2) {
  match (i1) {
    I(n1) -> {
      match (n2) {
        I(n2) -> {
          if (n1 <= n2) {
            return I(n2);
          }
          if (n2 <= n1) {
            return I(n1);
          }
        }
      }
    }
  }
}

Lattice<Int*>* make_lattice_increasing_int() {
  return make_lattice_wrapped_int(leq_increasing_int, 
                                  lub_single_write_int);
}

Lvar<Int*>* make_lvar_increasing_int() {
  Lattice<Int*>* lat = make_lattice_increasing_int();
  Lvar<Int*>* l = newLvar lat;
  return l;
}

#endif
