abstract production leq
top::Expr ::= lattice::Expr val1::Expr val2::Expr
{

  propagate substituted;
  top.pp = pp"leq(${lattice.pp}, ${val1.pp}, ${val2.pp})";

  forwards to
  case lattice.typerep of
    pointerType(_, latticeType(_, t)) -> 
      leq_helper(ableC_Expr{$Expr{lattice}->_top, val1, val2)
    _ -> errorExpr([err(top.location, 
         "Must provide a lattice to use leq, not" ++
         showType(lattice.typerep) ++">")], location=top.location)
  end;
}

abstract production leq_helper
top::Expr ::= lattice::Expr top::Expr val1::Expr val2::Expr
{
  propagate substituted;
  top.pp = pp"leq(${lattice.pp}, ${val1.pp}, ${val2.pp})";

  forwards to
    ableC_Expr{
      match ($Expr{val2}) {
        $Expr{top} -> {1;}
        _ -> {
          match ($Expr{val2}) {
            $Expr{top} -> {0;}
            _ -> {$Expr{lattice}->_leq($Expr{val1}, $Expr{val2})
          }
        }
      }
    }

  end;
}
