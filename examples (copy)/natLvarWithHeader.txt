#define DEBUG
#include "lvars.xh"
#include "single_write_int.xh"

// example that is essentially the same as int.xc, but uses a datatype with a
// better top and bottom

int main(int argc, char **argv) {

  // set up lattice

  Lattice<Int*> * D = make_lattice_single_write_int();

  // make some lvars 

  Lvar<Int*> *x = newLvar D;
  Lvar<Int*> *y = newLvar(D);

  // try putting in a value

  put (I(7)) in x;

  // build some activation sets

  ActivationSet<Int*> * a1 = activationSet(D){I(7)};
  ActivationSet<Int*> * a2 = activationSet(D);
  add(a2, I(8));
  ActivationSet<Int*> * a3 = activationSet(D, 1);
  ActivationSet<Int*> * a4 = activationSet(D, 1);
  add(a3, I(7));

  // make threshold set

  ThresholdSet<Int*> *t = thresholdSet(D){a1, a2};
  
  // try getting from lvar
  
  ActivationSet<Int*>*  result = get (x) with t;

  if (result == a1) {;
    printf("7\n");
  }
  else if (result == a2) {
    printf("8\n");
  }
  else if (result == a3) {
    printf("9\n");
  }
  else {
    printf("Error.");
  }

  printf("Threshold set: ");
  display (t);

  freeze(x);

  // clean up
  
  freeLvar(x);
  freeLvar(y);
  freeSet(a1);
  freeSet(a2);
  freeSet(a3);
  freeSet(t);
  freeLattice(D); 
  return 1;
}
